---
import { Image } from "astro:assets"
---

<style>
  section {
    @apply grid
    gap-1;
  }

  section > div {
    @apply p-1
    bg-neutral-50
    rounded
    shadow;
  }

  section > div:not(:first-child) {
    @apply flex flex-col
     items-center
     justify-center
     select-none
     whitespace-nowrap;
  }

  @media screen and (max-width: 640px) {
    section {
      @apply grid-cols-5;
    }

    section > div:first-child {
      @apply row-span-2;
    }

    section > div:first-child img {
      @apply min-h-[120px];
    }
  }

  @media screen and (min-width: 640px) {
    section {
      @apply grid-cols-2;
      grid-template-rows: 250px auto auto auto;
    }
    section > div:first-child {
      @apply col-span-2;
    }
    section > div:nth-of-type(2) {
      order: 1;
    }
    section > div:nth-of-type(3) {
      order: 3;
    }
    section > div:nth-of-type(4) {
      order: 5;
    }
    section > div:nth-of-type(5) {
      order: 7;
    }
    section > div:nth-of-type(6) {
      order: 2;
    }
    section > div:nth-of-type(7) {
      order: 4;
    }
    section > div:nth-of-type(8) {
      order: 6;
    }
    section > div:nth-of-type(9) {
      order: 8;
    }
  }
</style>
<section class="meteo">
  <div>
    <a href="/meteo">
      <Image
        src="http://www.ilmeteo.it/italy.png"
        alt="Il meteo di oggi by ilmeteo.it"
        width={222}
        height={240}
      />
    </a>
  </div>
  <div>
    <div id="temp" class="font-bold text-xl"></div>
    <div class="font-thin text-base">temperature</div>
  </div>
  <div>
    <div id="visibility" class="font-bold text-xl"></div>
    <div class="font-thin text-base">visibility</div>
  </div>
  <div>
    <div id="wind" class="font-bold text-xl"></div>
    <div class="font-thin text-base">wind</div>
  </div>
  <div>
    <div id="sunrise" class="font-bold text-xl"></div>
    <div class="font-thin text-base">sunrise</div>
  </div>
  <div>
    <div id="dewpoint" class="font-bold text-xl"></div>
    <div class="font-thin text-base">dewpoint</div>
  </div>
  <div>
    <div id="ceiling" class="font-bold text-xl"></div>
    <div id="ceiling-type" class="font-thin text-base">ceiling</div>
  </div>
  <div>
    <div id="qnh" class="font-bold text-xl"></div>
    <div class="font-thin text-base">QNH</div>
  </div>
  <div>
    <div id="sunset" class="font-bold text-xl"></div>
    <div class="font-thin text-base">sunset</div>
  </div>
</section>

<script>
  const AIRPORT_AW_URL: string = `https://server.airportweather.com/api/airports/${AIRPORT_AW_CODE}/weather`

  import { AIRPORT_AW_CODE } from "../consts"
  import type {
    IMeteo,
    MetarCoverageDefinition,
    Nowcast,
    Weather,
  } from "./Meteo"

  const response = await fetch(AIRPORT_AW_URL)
  const all: IMeteo = await response.json()
  const { next_sunrise, next_sunset, nowcast }: Weather = all.weather
  const {
    air_pressure_qnh,
    air_temperature_2m_agl,
    ceiling_agl,
    cloud_cover,
    dew_point_temperature_2m_agl,
    surface_visibility,
    wind_10m_agl,
  }: Nowcast = nowcast

  function percentageToMetar(value: number): MetarCoverageDefinition | null {
    // SKC (Sky Clear)
    // 1-25% - FEW (Few)
    // 26-50% - SCT (Scattered)
    // 51-87% - BKN (Broken)
    // 88-100% - OVC (Overcast)
    const MetarDefs: MetarCoverageDefinition[] = [
      { min: 0, max: 0, code: "SKC", description: "Sky Clear" },
      { min: 1, max: 25, code: "FEW", description: "Few" },
      { min: 26, max: 50, code: "SCT", description: "Scattered" },
      { min: 51, max: 87, code: "BKN", description: "Broken" },
      { min: 88, max: 100, code: "OVC", description: "Overcast" },
    ]

    return MetarDefs.find((m) => value >= m.min && value <= m.max) || null
  }

  // temperature
  const temp = air_temperature_2m_agl.time_steps[0].quantity
  document.getElementById("temp")!.textContent = temp.value
    ? `${temp.value.toFixed(1)} °C`
    : `${temp.meaning}`
  // dewpoint
  const dewp = dew_point_temperature_2m_agl.time_steps[0].quantity
  document.getElementById("dewpoint")!.textContent = dewp.value
    ? `${dewp.value.toFixed(1)} °C`
    : `${dewp.meaning}`
  // visibility
  const vis = surface_visibility.time_steps[0].quantity
  document.getElementById("visibility")!.textContent = vis.value
    ? `${Math.round(vis.value / 1000)} km`
    : `${vis.meaning}`
  // ceiling
  const ceil = ceiling_agl.time_steps[0].quantity
  document.getElementById("ceiling")!.textContent = ceil.value
    ? `${Math.round(ceil.value * 3.28084)} ft`
    : `${ceil.meaning}`
  // ceiling type
  const clouds = cloud_cover.time_steps[0].quantity
  const ceilType =
    percentageToMetar(clouds.value)?.description.toLowerCase() || ""
  document.getElementById("ceiling-type")!.textContent = ceilType
  // wind
  const { from_direction, speed } = wind_10m_agl.time_steps[0]
  const windDir = from_direction.value
    ? `${Math.round(from_direction.value)} °`
    : from_direction.meaning
  const windSpeed = Math.round(speed.value * 1.94384)
  document.getElementById("wind")!.textContent = `${windDir} ${windSpeed}kt`

  // QNH
  const qnh = air_pressure_qnh.time_steps[0].quantity
  document.getElementById("qnh")!.textContent = vis.value
    ? `${Math.round(qnh.value / 100)} hPa`
    : `${vis.meaning}`

  const sunrise: Date = new Date(next_sunrise.replaceAll(/\[.*/g, ""))
  document.getElementById("sunrise")!.textContent =
    sunrise.toLocaleTimeString("it-IT")

  const sunset: Date = new Date(next_sunset.replaceAll(/\[.*/g, ""))
  document.getElementById("sunset")!.textContent =
    sunset.toLocaleTimeString("it-IT")
</script>
